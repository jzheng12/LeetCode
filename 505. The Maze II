public class Solution {
    class Point {
        int x, y, dist;
        public Point(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int[][] dir=new int[][] {{-1,0},{0,1},{1,0},{0,-1}};
        int rows = maze.length, cols = maze[0].length;
        int[][] res = new int[rows][cols];
        for (int i = 0; i < rows * cols; i++) res[i/cols][i % cols] = Integer.MAX_VALUE;
        PriorityQueue<Point> pq = new PriorityQueue<Point>((o1, o2)-> o1.dist - o2.dist);
        pq.offer(new Point(start[0], start[1], 0));
        while (!pq.isEmpty()) {
            Point cur = pq.poll();
            if (res[cur.x][cur.y] <= cur.dist) continue;
            res[cur.x][cur.y] = cur.dist;
            for (int[] d : dir) {
                int x = cur.x, y = cur.y, dist = cur.dist;
                while (x < rows && x >= 0 && y < cols && y >= 0 && maze[x][y] == 0) {
                    x += d[0];
                    y += d[1];
                    dist++;
                }
                x -=d[0];
                y -= d[1];
                dist--;
                pq.offer(new Point(x, y, dist));
            }
        }
        int ans = res[destination[0]][destination[1]];
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}
