public class Solution {
    Map<String, Map<Integer, Integer>> map;
    public int findRotateSteps(String ring, String key) {
        map = new HashMap<>();
        return dfs(ring, key, 0);
    }
    private int findPos(String ring, char ch) {
        return ring.indexOf(ch);
    }
    private int findBackPos(String ring, char ch) {
        if (ring.charAt(0) == ch) return 0;
        for (int i = ring.length() - 1; i > 0 ; i--) {
            if (ring.charAt(i) == ch) return i;
        }
        return 0;
    }
    private int dfs(String ring, String key, int idx) {
        if (idx == key.length()) return 0;
        int res = 0;
        char ch = key.charAt(idx);
        if (map.containsKey(ring) && map.get(ring).containsKey(idx)) return map.get(ring).get(idx);
        int f = findPos(ring, ch), b = findBackPos(ring, ch);
        int forward = 1 + f + dfs(ring.substring(f) + ring.substring(0, f), key, idx + 1);
        int backward = 1 + ring.length() - b + dfs(ring.substring(b) + ring.substring(0, b),key, idx + 1);
        res = Math.min(forward, backward);
        Map<Integer, Integer> ans = map.getOrDefault(ring, new HashMap<>());
        ans.put(idx, res);
        map.put(ring, ans);
        return res;
    }
}
