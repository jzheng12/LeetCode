    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        if (nums.length == 0) return nums[0];
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[i] = nums[i];
            for (int j = 0; j < i - 1; j++) {
                dp[i] = Math.max(dp[i], dp[j] + nums[i]);
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
    Method 2:
    
      public int rob(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        int[][] dp = new int[nums.length][2];
        dp[0][0] = 0;
        dp[0][1] = nums[0];
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            dp[i][1] = dp[i - 1][0] + nums[i];
            max = Math.max(max, Math.max(dp[i][0], dp[i][1]));
        }
        return max;
    }
    method 3:
      public int rob(int[] nums) {
        if (nums == null  || nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);        
        for (int i = 2; i < nums.length; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);          
        }
        return dp[nums.length - 1];
    }
    method 4:
      public int rob(int[] nums) {
        if (nums == null  || nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
        int preSec = nums[0];       
        int preFirst = Math.max(nums[0], nums[1]);        
        for (int i = 2; i < nums.length; i++) {
             int cur = Math.max(preFirst, preSec + nums[i]);
             preSec = preFirst;
             preFirst = cur;
        }
        return preFirst;
    }
 213. House Robber II   
   public int rob(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
         return Math.max(helper(nums, 0, nums.length - 2), helper(nums, 1, nums.length - 1));
    }
    public int helper(int[] nums, int left, int right) {
        if (right - left <= 1) return Math.max(nums[left], nums[right]);
         int preFirst = nums[left];       
        int preFirst = Math.max(nums[left], nums[left + 1]);        
        for (int i = left + 2; i <= right; i++) {
             int cur = Math.max(preFirst, preSec + nums[i]);
             preSec = preFirst;
             preFirst = cur;
        }
        return preFirst;
    }
    
    337. House Robber III
    public int rob(TreeNode root) {
        if (root == null) return 0;
        int[] res = helper(root);
        return Math.max(res[0], res[1]);
    }
    private int[] helper(TreeNode root) {
        if (root == null) return new int[]{0, 0};
        int[] left = helper(root.left);
        int[] right = helper(root.right);
        int[] cur = new int[2];
        cur[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
        cur[1] = left[0] + right[0] + root.val;
        return cur;
    }
