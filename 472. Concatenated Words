//dp

public class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> list = new ArrayList<>();
        Set<String> set = new HashSet<>();
        Arrays.sort(words, new Comparator<String>(){
            public int compare(String s1, String s2) {
                return s1.length() - s2.length();
            }
        });
        for (int i = 0; i < words.length; i++) {
            if (canForm(words[i], set)) {
                list.add(words[i]);
            }
            set.add(words[i]);
        }
        return list;
    }
    private boolean canForm(String s, Set<String> set) {
        if (set.isEmpty()) return false;
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (!dp[j]) continue;
                if (set.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}

// dfs + trie
public class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> res = new ArrayList<>();
        if (words == null || words.length == 0 ) return res;
        TrieNode root = new TrieNode();
        for (String word : words) {
            if (word.length() == 0) continue;
            addWord(word, root);
        }
        for (String word : words) {
            if (word.length() == 0) continue;
            if (testWord(word.toCharArray(), 0, root, 0)) res.add(word);
        }
        return res;
        
    }
    public boolean testWord(char[] chars, int idx, TrieNode root, int count) {
        TrieNode cur = root;
        int n = chars.length;
        for (int i = idx; i < n; i++) {
            if (cur.sons[chars[i] - 'a'] == null) return false;
            if (cur.sons[chars[i] - 'a'].isEnd) {
                if (i == n - 1) return count >= 1;
                if ((testWord(chars, i + 1, root, count + 1))) return true;
            }
        	cur = cur.sons[chars[i] - 'a'];
        }
        return false;
        
    }
    private void addWord(String str, TrieNode root) {
        char[] chars = str.toCharArray();
        TrieNode cur = root;
        for (char ch : chars) {
            if (cur.sons[ch - 'a'] == null) {
                cur.sons[ch - 'a'] = new TrieNode();
            } 
            cur = cur.sons[ch - 'a'];
        }
        cur.isEnd = true;
    }
}

class TrieNode{
    TrieNode[] sons;
    boolean isEnd;
    public TrieNode() {
        sons = new TrieNode[26];
    }
}
